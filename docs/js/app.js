
    const schema = {
  "asyncapi": "2.5.0",
  "info": {
    "title": "Verona Inferfaces Specification \"Widget\"",
    "version": "0.2.0",
    "description": "This is one part of the [Verona Online Assessment Standards](https://verona-interfaces.github.io).\nAll messages are sent via the postMessage function of the html page. The widget takes the page root of its parent\nas target (parent.window), and the application binds the function call to the iframe element of the widget.\n\nMost important, the message body carries as first parameter the operationId of the message.\n\nThe html page MUST contain a script-tag with metadata. The syntax and structure of this data are described\n[here](https://verona-interfaces.github.io/intro/metadata.html).\n",
    "license": {
      "name": "CC0-1.0",
      "url": "http://creativecommons.org/publicdomain/zero/1.0/"
    },
    "contact": {
      "name": "Institute for Educational Quality Improvement (IQB)",
      "url": "https://www.iqb.hu-berlin.de",
      "email": "iqb-tbadev@hu-berlin.de"
    }
  },
  "channels": {
    "vowReadyNotification": {
      "subscribe": {
        "operationId": "vowReadyNotification",
        "summary": "Ready Notification",
        "description": "The widget announces that it's code is loaded and initialized so the communication can start.",
        "message": {
          "name": "vowReadyNotification",
          "payload": {
            "type": "object",
            "properties": {
              "metadata": {
                "type": "string",
                "description": "Via this property, the widget sends the stringified metadata object definied as json-ld in\nthe header of the html file. See [here](https://verona-interfaces.github.io/intro/metadata.html)\nfor more information.\n",
                "x-parser-schema-id": "<anonymous-schema-2>"
              }
            },
            "required": [
              "metadata"
            ],
            "additionalProperties": false,
            "x-parser-schema-id": "<anonymous-schema-1>"
          }
        }
      }
    },
    "vowStartCommand": {
      "publish": {
        "operationId": "vowStartCommand",
        "summary": "Start Command",
        "description": "The application sends execution parameters.",
        "message": {
          "name": "vowStartCommand",
          "contentType": "application/json",
          "payload": {
            "type": "object",
            "properties": {
              "sessionId": {
                "description": "The session id flags all communication. If a message has no or empty session id, it's not processed. The session id is unique and was generated by the application. Any simple algorithm would work. The session id helps to link the correct unit with the data of the message. Using the id of the editor hosting html element is less reliable, because the element could be reused with another unit.",
                "type": "string",
                "example": "idk8ur5jf9ru5jk",
                "x-parser-schema-id": "SessionIdString"
              },
              "parameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "x-parser-schema-id": "<anonymous-schema-5>"
                    },
                    "value": {
                      "type": "string",
                      "x-parser-schema-id": "<anonymous-schema-6>"
                    }
                  },
                  "required": [
                    "key"
                  ],
                  "additionalProperties": false,
                  "x-parser-schema-id": "Parameter"
                },
                "x-parser-schema-id": "<anonymous-schema-4>"
              },
              "sharedParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "This object structure is used to share data between instances of the module. The host may collect all shared data sent by modules and provide it to every module.",
                  "properties": {
                    "key": {
                      "description": "Identifier to find or set the shared parameter.",
                      "type": "string",
                      "minLength": 2,
                      "x-parser-schema-id": "<anonymous-schema-8>"
                    },
                    "value": {
                      "description": "Value of the parameter.",
                      "type": "string",
                      "x-parser-schema-id": "<anonymous-schema-9>"
                    }
                  },
                  "required": [
                    "key"
                  ],
                  "example": {
                    "key": "CODE_MODE",
                    "value": "INSTRUCTIONS_ONLY"
                  },
                  "x-parser-schema-id": "SharedParameter"
                },
                "x-parser-schema-id": "<anonymous-schema-7>"
              },
              "state": {
                "type": "string",
                "format": "byte",
                "x-parser-schema-id": "<anonymous-schema-10>"
              }
            },
            "required": [
              "sessionId"
            ],
            "additionalProperties": false,
            "x-parser-schema-id": "<anonymous-schema-3>"
          }
        }
      }
    },
    "vowStateChangedNotification": {
      "subscribe": {
        "operationId": "vowStateChangedNotification",
        "summary": "State Changed Notification",
        "description": "The widget sends state data.",
        "message": {
          "name": "vowStateChangedNotification",
          "contentType": "application/json",
          "payload": {
            "type": "object",
            "properties": {
              "sessionId": "$ref:$.channels.vowStartCommand.publish.message.payload.properties.sessionId",
              "timeStamp": {
                "type": "string",
                "format": "date-time",
                "description": "Ensures, that later arriving states are ignored.",
                "x-parser-schema-id": "<anonymous-schema-12>"
              },
              "sharedParameters": {
                "type": "array",
                "items": "$ref:$.channels.vowStartCommand.publish.message.payload.properties.sharedParameters.items",
                "x-parser-schema-id": "<anonymous-schema-13>"
              },
              "state": {
                "type": "string",
                "format": "byte",
                "x-parser-schema-id": "<anonymous-schema-14>"
              }
            },
            "required": [
              "sessionId",
              "timeStamp"
            ],
            "additionalProperties": false,
            "x-parser-schema-id": "<anonymous-schema-11>"
          }
        }
      }
    },
    "vowReturnRequested": {
      "subscribe": {
        "operationId": "vowReturnRequested",
        "summary": "Close Requested",
        "description": "The widget calls for closing the widget dialog.",
        "message": {
          "name": "vowReturnRequested",
          "contentType": "application/json",
          "payload": {
            "type": "object",
            "properties": {
              "sessionId": "$ref:$.channels.vowStartCommand.publish.message.payload.properties.sessionId",
              "timeStamp": {
                "type": "string",
                "format": "date-time",
                "description": "Ensures, that later arriving states are ignored.",
                "x-parser-schema-id": "<anonymous-schema-16>"
              },
              "saveState": {
                "type": "boolean",
                "description": "If true, the host is requested to send the final state to the player.\nIf false, no vopWidgetReturn message will be sent to the player.\n",
                "default": true,
                "x-parser-schema-id": "<anonymous-schema-17>"
              }
            },
            "required": [
              "sessionId",
              "timeStamp"
            ],
            "additionalProperties": false,
            "x-parser-schema-id": "<anonymous-schema-15>"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SessionIdString": "$ref:$.channels.vowStartCommand.publish.message.payload.properties.sessionId",
      "SharedParameter": "$ref:$.channels.vowStartCommand.publish.message.payload.properties.sharedParameters.items",
      "Parameter": "$ref:$.channels.vowStartCommand.publish.message.payload.properties.parameters.items"
    }
  },
  "x-parser-spec-parsed": true,
  "x-parser-api-version": 3,
  "x-parser-spec-stringified": true
};
    const config = {"show":{"sidebar":true},"sidebar":{"showOperations":"byDefault"},"showOperations":true};
    const appRoot = document.getElementById('root');
    AsyncApiStandalone.render(
        { schema, config, }, appRoot
    );
  